{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(plyr)\n#setwd(\"/srv/shiny-server/sims/\")\n#library(googleVis)\n#require(graphics)\n# By default, the file size limit is 5MB. It can be changed by\n# setting this option. Here we'll raise limit to 30MB.\noptions(shiny.maxRequestSize = 30*1024^2)\nsource(\"FoldChange_calculation.R\")\nsource(\"CopyNumberAlteration.R\")\nsource(\"mutation_score.R\")\n# Define server logic for random distribution application\nshinyServer(function(input, output) { \n  \n  # Generate a summary of the data\n  datatable_mrna<-reactive({\n    inputfile_mrna<-input$mytable_mrna\n    if(is.null(inputfile_mrna)){return(NULL)}\n    mrna_dtable<-read.csv(inputfile_mrna$datapath, header = input$header, sep = input$sep, stringsAsFactors = F)    # header for header file, sep for separator\n    return(mrna_dtable)\n  })\n  \n  histology <- reactive({\n    Histology <- c(\"AC\",\"AC\",\"SCC\",\"AC\",\"AC\",\"SCC\",\"AC\",\"AC\",\"SCC\",\"SCC\",\"LCC\",\"AC\",\"SCC\",\"AC\",\"SCC\",\"AC\",\"AC\",\"AC\",\"Other SCLC\",\"LCC\",\"AC\",\"LCC\",\"LCC\",\"AC\",\"AC\",\"SCC\",\"SCC\",\"SCC\",\"AC\",\"SCC\",\"AC\",\"AC\",\"Other ADEC\",\"SCC\",\"SCC\",\"AC\",\"SCC\",\"LCC\",\"AC\",\"AC\",\"SCC\",\"AC\",\"AC\",\"AC\",\"SCC\",\"AC\",\"SCC\",\"SCC\",\"SCC\",\"AC\",\"SCC\",\"AC\",\"SCC\",\"AC\",\"AC\",\"SCC\",\"AC\",\"AC\",\"AC\",\"AC\",\"SCC\",\"SCC\",\"AC\",\"AC\",\"SCC\",\"SCC\",\"AC\",\"LCC\",\"SCC\",\"AC\",\"AC\",\"AC\",\"LCC\",\"SCC\",\"SCC\",\"SCC\",\"SCC\",\"AC\",\"LCC\",\"SCC\",\"AC\",\"SCC\",\"AC\",\"SCC\",\"SCC\",\"SCC\",\"AC\",\"SCC\",\"LCC\",\"SCC\",\"AC\",\"AC\",\"AC\",\"AC\",\"LCC\",\"AC\",\"Other ADEC\",\"AC\",\"SCC\",\"SCC\",\"AC\",\"LCC\",\"SCC\",\"AC\",\"SCC\",\"AC\",\"SCC\",\"LCC\",\"AC\",\"SCC\",\"AC\",\"SCC\",\"AC\",\"SCC\",\"SCC\",\"SCC\",\"SCC\",\"SCC\",\"SCC\",\"AC\",\"AC\")\n    return(Histology)\n  })\n  \n  datatable_mirna<-reactive({\n    inputfile_mirna<-input$mytable_mirna\n    if(is.null(inputfile_mirna)){return(NULL)}\n    mirna_dtable<-read.csv(inputfile_mirna$datapath, header = input$header, sep = input$sep)    \n    return(mirna_dtable)\n  })\n  \n  datatable_CNA<-reactive({\n    inputfile_CNA<-input$mytable_CNA\n    if(is.null(inputfile_CNA)){return(NULL)}\n    CNA_dtable<-read.csv(inputfile_CNA$datapath, header = input$header, sep = input$sep, stringsAsFactors = F)[,-1]    \n    return(CNA_dtable)\n  })\n  \n  datatable_mutation<-reactive({\n    inputfile_mutation<-input$mytable_mutation\n    if(is.null(inputfile_mutation)){return(NULL)}\n    mutation_dtable<-read.csv(inputfile_mutation$datapath, header = input$header, sep = input$sep, stringsAsFactors = F)[,c(-1,-2)]\n    return(mutation_dtable)\n  })\n  \n  output$mRNAcontents<-renderTable({\n    if (is.null(input$mytable_mrna)){return(NULL)}\n    return(datatable_mrna())\n  })\n  \n  output$miRNAcontents <- renderTable({\n    if(is.null(input$mytable_mirna)){return(NULL)}\n    return(datatable_mirna())\n  })\n  \n  output$CNAcontents <- renderTable({\n    if(is.null(input$mytable_CNA)){return(NULL)}\n    return(datatable_CNA())\n  })\n  \n  output$Mutation_contents <- renderTable({\n    if(is.null(input$mytable_mutation)){return(NULL)}\n    return(datatable_mutation())\n  })\n  \n  output$mRNAsummary<-renderPrint({\n    if (is.null(input$mytable_mrna)){return(\"File upload error: No file uploaded\")}\n    #final_data_gene_expression = calculate_fold_change(datatable_mrna(), \"mRNA\")\n    #return(final_data_gene_expression[1:5, 1:5])\n    return(summary(datatable_mrna()))\n  })\n  \n  output$miRNAsummary <- renderPrint({\n    if(is.null(input$mytable_mirna)){return(\"File upload error: No file uploaded\")}\n    return(summary(datatable_mirna()))\n  })\n  \n  output$CNAsummary <- renderPrint({\n    if(is.null(input$mytable_CNA)){return(\"File upload error: No file uploaded\")}\n    return(summary(datatable_CNA()))\n  })\n  \n  output$mRNAplot <- renderPlot({    \n    mRNA <- datatable_mrna()\n    rowsize = 183\n    colsize = 121\n    mRNA  = mRNA[-1,-1]\n    rownames(mRNA) = 1:121\n    dataMatrix2 = as.matrix(mRNA)\n    DATAMATRIX <- matrix(dataMatrix2, ncol = ncol(dataMatrix2), dimnames = NULL)\n    DATAMATRIX = matrix(as.numeric(DATAMATRIX), nrow = nrow(DATAMATRIX), ncol = ncol(DATAMATRIX))\n    dataMatrix = DATAMATRIX\n    hh <- hclust(dist(dataMatrix))\n    dataMatrixOrdered <- dataMatrix[hh$order, ]\n    par(mfrow = c(1, 3))\n    image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1], xlab = \"Patient ID\", ylab = \"Genes\")\n    plot(rowMeans(dataMatrixOrdered), colsize:1, , xlab = \"Row wise mean expression \", ylab = \"Patient ID\", pch = 19)\n    plot(colMeans(dataMatrixOrdered), xlab = \"Genes\", ylab = \"Column wise mean expression\", pch = 19)\n    #heatmap.2(dataMatrix, scale = 'row')   \n  }, height = 600)\n  \n  output$miRNAplot <- renderPlot({\n    miRNA <- datatable_mirna()\n    rowsize = 158\n    colsize = 121\n    miRNA  = miRNA[-1,-1]\n    rownames(miRNA) = 1:121\n    dataMatrix2 = as.matrix(miRNA)\n    DATAMATRIX <- matrix(dataMatrix2, ncol = ncol(dataMatrix2), dimnames = NULL)\n    DATAMATRIX = matrix(as.numeric(DATAMATRIX), nrow = nrow(DATAMATRIX), ncol = ncol(DATAMATRIX))\n    dataMatrix = DATAMATRIX\n    hh <- hclust(dist(dataMatrix))\n    dataMatrixOrdered <- dataMatrix[hh$order, ]\n    par(mfrow = c(1, 3))\n    image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1], xlab = \"Patient ID\", ylab = \"Genes\")\n    plot(rowMeans(dataMatrixOrdered), colsize:1, , xlab = \"Row wise mean expression \", ylab = \"Patient ID\", pch = 19)\n    plot(colMeans(dataMatrixOrdered), xlab = \"Genes\", ylab = \"Column wise mean expression\", pch = 19)\n  }, height = 600)\n  ############ Score and Analysis #############\n  simsScore <- reactive({\n    node_names = c(\"Her_pathway\", \"CDK4_6\", \"PLK_AURKA_Kinesins\", \"ANGIOGENESIS\", \"ANGIOPOIETINS\", \"IMMUNO-Modulator\", \"PI3K\", \"MET\",\n                   \"MEK\", \"ERK\", \"Antiapoptosis\", \"FGF\", \"mTOR_AKT_PTEN\", \"RAS\", \"TELOMERASE\", \"IGF_Warburg\", \"WNT\", \"PARP\", \"HDAC\",\n                   \"JAK_STAT\", \"HEDGEHOG\", \"NOTCH\", \"DNA_REPAIR\",\"OTHERS\")\n    final_score_mrna = calculate_fold_change(datatable_mrna(), \"mRNA\")\n    mrna_score = final_score_mrna[[1]]\n    avg_mrna = final_score_mrna[[2]]    \n    \n    avg_mirna = calculate_fold_change(datatable_mirna(), \"miRNA\")\n        \n    matched_expression_mRNA_miRNA = avg_mrna/avg_mirna\n    #### Since miRNA NOTCH clumn is NA replace that coulumn with mRNA notch\n    matched_expression_mRNA_miRNA[,22] = avg_mrna[, 22]\n    mirna_score <- decile_Calculation(matched_expression_mRNA_miRNA, datatable_mrna())\n        \n    stupid <<- datatable_mrna()\n    final_score_CNA = calculate_CNA(datatable_CNA(), datatable_mrna())\n    final_score_numeric <<- matrix(NA, nrow = 121, ncol = 24)\n    for(j in 1:24){\n      final_newscore_CNA = sapply(final_score_CNA[,j], as.numeric)\n      final_score_numeric[,j] = final_newscore_CNA\n    }\n    \n    mutation_original = datatable_mutation()\n    m_score = calculate_mutation_score(mutation_original, datatable_mrna())\n    # Calculate mean #\n    mrna_score1 = as.matrix(mrna_score)\n    mrna_score2 = matrix(mrna_score1, ncol = 24, dimnames = NULL)\n    total_score = mrna_score2 + mirna_score + final_score_numeric + m_score\n    total_score = total_score/4\n    colnames(total_score) = node_names\n    #total_score <- gvisTable(total_score)#, options = list(page = 'enable', height = 300, width = 800))\n    #total_score = final_score_CNA\n    return(total_score)    \n  })\n\n\n  output$calculateScore <- renderTable({\n    return(simsScore())\n  })\n\n  \n  output$scoreAnalysis <- renderPlot({    \n    sims_score <- simsScore()\n    histology = histology()\n    #print(hist)\n    histology <- as.data.frame(histology)\n    sims_score <- cbind(histology, sims_score)\n    par(mfrow = c(4, 1))\n    hc <- hclust(dist(sims_score[, -1], method = \"euclidean\"), method=\"ave\")\n    plot(hc, hang = -1, main = \"Score dendrogram for NSCLC cohort\", xlab = \"Node names\") \n    ############ Extract patients with similar histology ########################\n    score_table_AC = sims_score[which(sims_score$histology == 'AC'),]\n    hc <- hclust(dist(score_table_AC[,-1], method = \"euclidean\"), method=\"ave\")\n    plot(hc, hang = -1, main = \"Score dendrogram for NSCLC-AC cohort\", xlab = \"Node names\")\n    \n    score_table_LCC = sims_score[,-1][which(sims_score$histology == 'LCC'),]\n    hc <- hclust(dist(score_table_LCC[, -1], method = \"euclidean\"), method=\"ave\")\n    plot(hc, hang = -1, main = \"Score dendrogram for NSCLC-LCC cohort\", xlab = \"Node names\")\n    \n    score_table_SCC = sims_score[,-1][which(sims_score$histology == 'SCC'),]\n    hc <- hclust(dist(score_table_SCC[, -1], method = \"euclidean\"), method= \"ave\")\n    plot(hc, hang = -1, main = \"Score dendrogram for NSCLC-SCC cohort\", xlab = \"Node names\")    \n  }, height = 2000)  \n  \n  ntext <- eventReactive(input$goButton, {\n    input$n\n  })\n  \n  output$nText <- renderText({\n    ntext()\n  })\n  \n})\n",
    "created" : 1493271088125.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2056564807",
    "id" : "9E2C8A11",
    "lastKnownWriteTime" : 1449403718,
    "last_content_update" : 1449403718,
    "path" : "~/sims_web_bgu/SIMS/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}